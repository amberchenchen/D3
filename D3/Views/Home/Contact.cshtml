
<br />

<div ng-app="myApp" ng-controller="myCtrl">
    <p>Group: <input type="text" ng-model="group"></p>
    <p>Name: <input type="text" ng-model="name"></p>
    <button ng-click="filterFunc()">Click me!</button>

</div>
<div id="graph">
</div>
<style type="text/css">
    .link {
        stroke: #b94a48;
        stroke-width: 3;
    }

    .nodetext {
        pointer-events: none;
        font: 10px sans-serif;
    }
</style>


<script type="text/javascript">

    var w = 960,
        h = 500,
        data;

    d3.json("../Scripts/D3Scripts/build/graph.json?d=6", function (json) {
        data = json;
        d3Graph(json);
        //var graph = d3Graph(json);
        //graph.d3.selectAll().selectAll("line.link");
    });

    var vis = d3.select("#graph").append("svg:svg")
    .attr("width", w)
    .attr("height", h);

var app = angular.module('myApp', []);
app.controller('myCtrl', function ($scope) {
    $scope.filterFunc = function () {
        $("svg").empty();
        if ($scope.name || $scope.group) {
            var temdata = {
                "nodes": [],
                "links": []
            };

            var json;

            if ($scope.name) {
                json = $.grep(data.nodes, function (n, i) {
                    return n.name.toLowerCase() === $scope.name.toLowerCase();
                });
            }
            else if ($scope.group) {
                var temp;
                if (json != null)
                    temp = json;
                else
                    temp = data.nodes

                json = $.grep(temp, function (n, i) {
                    return n.group.toString() === $scope.group;
                });
            }

            temdata.nodes = json;
            temdata.links = data.links;
            d3Graph(temdata);
        }
        else {
            d3Graph(data);
        }
    }
});

function d3Graph(json) {
    var force = self.force = d3.layout.force()
        .nodes(json.nodes)
        .links(json.links)
        .gravity(.05)
        .distance(100)
        .charge(-200)
        .size([w, h])
        .start();

    var link = vis.selectAll("line.link")
        .data(json.links)
        .enter().append("svg:line")
        .attr("class", "link")
        .attr("x1", function (d) { return d.source.x; })
        .attr("y1", function (d) { return d.source.y; })
        .attr("x2", function (d) { return d.target.x; })
        .attr("y2", function (d) { return d.target.y; })
        .on("mouseover", function (d) { return tooltip.style("visibility", "visible"); })
	    .on("mousemove", function (d) {
	        return tooltip.style("top", (event.pageY - 10) + "px").style("left", (event.pageX + 10) + "px")
	                       .text(d.source.name + "," + d.target.name);
	    })
	    .on("mouseout", function (d) { return tooltip.style("visibility", "hidden"); });

    link.append("text")
        .attr("dx", 12)
        .attr("dy", ".35em")
        .text(function (d) { return "test" });

    var node_drag = d3.behavior.drag()
        .on("dragstart", dragstart)
        .on("drag", dragmove)
        .on("dragend", dragend);

    function dragstart(d, i) {
        force.stop() // stops the force auto positioning before you start dragging
    }

    function dragmove(d, i) {
        d.px += d3.event.dx;
        d.py += d3.event.dy;
        d.x += d3.event.dx;
        d.y += d3.event.dy;
        tick(); // this is the key to make it work together with updating both px,py,x,y on d !
    }

    function dragend(d, i) {
        d.fixed = true; // of course set the node to fixed so the force doesn't include the node in its auto positioning stuff
        tick();
        force.resume();
    }

    var color = d3.scale.category20();

    var node = vis.selectAll("g.node")
        .data(json.nodes)
        .enter().append("svg:g")
        .attr("class", "node")
        //.attr("ondblclick", function (d) { alert("123") })
        .call(node_drag)
        //.on("click", function (d) { return onclick(d); })
        .on("contextmenu", function (d) { return onRightclick(d); })
        .on("dblclick", function (d) { return onDoubleclick(d); })
        .on("click", function (d) { return onclick(d); })
        .on("mouseover", function (d) { return tooltip.style("visibility", "visible"); })
	    .on("mousemove", function (d) {
	        return tooltip.style("top", (event.pageY - 10) + "px").style("left", (event.pageX + 10) + "px")
	                       .text(d.name +"," +d.id);
	    })
	    .on("mouseout", function (d) { return tooltip.style("visibility", "hidden"); });

    node.append("circle")
	.attr("r", 35)
	.style("fill", function (d) { return color(1 / d.rating); });

    this.d3TitleNodes = node.append("text")
      .attr("text-anchor", "middle")
      .attr("dy", ".35em")
      .text(function (d) { return d.name });

    var tooltip = d3.select("body")
     .append("div")
     .attr("class", "insights-tooltip")
     .style("position", "absolute")
     .style("z-index", "10")
     .style("visibility", "hidden")
     .text("a simple tooltip");

    force.on("tick", tick);

    function tick() {
        link.attr("x1", function (d) { return d.source.x; })
            .attr("y1", function (d) { return d.source.y; })
            .attr("x2", function (d) { return d.target.x; })
            .attr("y2", function (d) { return d.target.y; });

        node.attr("transform", function (d) { return "translate(" + d.x + "," + d.y + ")"; });
    };

    function onclick(d) {
        alert("on click  " + d.name);
    }

    function onRightclick(d) {
        var e = d3.event;
        e.preventDefault();
        // e.stopPropagation();
        alert("on Right click  " + d.name);
    }

    function onDoubleclick(d) {
        alert("on Double click  " + d.name);
    }

    return this;
}

</script>